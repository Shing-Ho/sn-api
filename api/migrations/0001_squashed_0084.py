# Generated by Django 3.1.2 on 2021-02-09 04:45
import json

from django.contrib.auth.models import User

import api.models.models
import datetime
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.utils.timezone
import django_enumfield.db.fields
import jsonfield.fields
import uuid

from api import logger


def set_defaults_values(*_):
    logger.debug("Import user data start")
    f = open(settings.BASE_DIR + "/api/resources/users/user_data.json")
    data = json.load(f)
    for user in data["users"]:
        try:
            if not User.objects.filter(username=user["username"]).exits():
                user_obj = User(
                    email=user["email"],
                    username=user["username"],
                    is_staff=user["is_staff"],
                    is_superuser=user["is_superuser"],
                    is_active=user["is_active"],
                )
                user_obj.set_password(user["password"])
                user_obj.save()
        except Exception as e:
            logger.debug("User already exists {}".format(e))
    logger.debug("Import user data End")


class Migration(migrations.Migration):
    replaces = [
        ("api", "0001_initial"),
        ("api", "0002_auto_20200721_1622"),
        ("api", "0003_auto_20200805_0613"),
        ("api", "0004_auto_20200805_0632"),
        ("api", "0005_auto_20200807_0804"),
        ("api", "0006_auto_20200811_0727"),
        ("api", "0007_auto_20200811_0729"),
        ("api", "0008_auto_20200813_0637"),
        ("api", "0009_auto_20200814_0822"),
        ("api", "0010_auto_20200818_2012"),
        ("api", "0011_hote_listings"),
        ("api", "0012_auto_20200820_1017"),
        ("api", "0013_auto_20200820_1054"),
        ("api", "0014_auto_20200821_0516"),
        ("api", "0015_auto_20200821_2305"),
        ("api", "0016_auto_20200821_2342"),
        ("api", "0017_airport"),
        ("api", "0018_auto_20200827_0703"),
        ("api", "0019_auto_20200828_0637"),
        ("api", "0020_auto_20200904_0516"),
        ("api", "0022_auto_20200911_0437"),
        ("api", "0023_supplier_priceline"),
        ("api", "0024_auto_20200917_0718"),
        ("api", "0025_auto_20200924_0540"),
        ("api", "0003_auto_20200916_1047"),
        ("api", "0026_merge_20200924_2101"),
        ("api", "0027_auto_20200924_2115"),
        ("api", "0028_auto_20200928_1201"),
        ("api", "0029_auto_20200928_1246"),
        ("api", "0030_providerimages"),
        ("api", "0031_auto_20200929_0554"),
        ("api", "0032_auto_20201001_0528"),
        ("api", "0033_hotelcancellationpolicy"),
        ("api", "0034_auto_20201007_0553"),
        ("api", "0035_auto_20201007_0655"),
        ("api", "0036_auto_20201008_0508"),
        ("api", "0037_auto_20201008_0623"),
        ("api", "0038_auto_20201009_0402"),
        ("api", "0039_auto_20201009_1939"),
        ("api", "0040_auto_20201014_0700"),
        ("api", "0041_auto_20201014_0708"),
        ("api", "0042_providerhotel_provider_reference"),
        ("api", "0043_delete_supplier_priceline"),
        ("api", "0044_auto_20201021_0509"),
        ("api", "0045_auto_20201022_0206"),
        ("api", "0046_auto_20201027_0418"),
        ("api", "0047_auto_20201027_0529"),
        ("api", "0048_auto_20201027_0539"),
        ("api", "0049_auto_20201028_0402"),
        ("api", "0050_geoname_location_type"),
        ("api", "0051_recordlocator"),
        ("api", "0052_auto_20201030_0627"),
        ("api", "0053_auto_20201101_0334"),
        ("api", "0054_auto_20201106_0201"),
        ("api", "0055_auto_20201113_1927"),
        ("api", "0056_auto_20201116_1957"),
        ("api", "0057_auto_20201117_0636"),
        ("api", "0058_booking_organization"),
        ("api", "0059_hotelevent_searchevent"),
        ("api", "0060_auto_20201122_0818"),
        ("api", "0061_auto_20201207_0538"),
        ("api", "0062_searchevent_request_id"),
        ("api", "0063_add_search_event_index_request_id"),
        ("api", "0064_add_search_event_index_created_at"),
        ("api", "0065_auto_20210119_2305"),
        ("api", "0066_auto_20210119_2337"),
        ("api", "0067_auto_20210120_1547"),
        ("api", "0068_auto_20210120_1702"),
        ("api", "0069_auto_20210120_1704"),
        ("api", "0070_venuecontacts"),
        ("api", "0071_auto_20210121_0442"),
        ("api", "0072_auto_20210121_0606"),
        ("api", "0073_auto_20210121_0615"),
        ("api", "0074_productgroup_productmedia_productsnightlife"),
        ("api", "0075_auto_20210122_1834"),
        ("api", "0076_auto_20210122_1842"),
        ("api", "0077_auto_20210122_1848"),
        ("api", "0078_auto_20210122_1853"),
        ("api", "0079_auto_20210122_1858"),
        ("api", "0080_auto_20210123_2314"),
        ("api", "0081_auto_20210126_0513"),
        ("api", "0081_auto_20210126_0955"),
        ("api", "0082_auto_20210126_1806"),
        ("api", "0083_auto_20210126_1806"),
        ("api", "0084_producthotels_productshotelroomdetails_productshotelroompricing"),
    ]

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Geoname",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geoname_id", models.IntegerField(unique=True)),
                ("iso_country_code", models.CharField(max_length=2)),
                ("location_name", models.TextField()),
                ("latitude", models.DecimalField(decimal_places=6, max_digits=11)),
                ("longitude", models.DecimalField(decimal_places=6, max_digits=10)),
                ("population", models.IntegerField(default=0)),
                ("province", models.CharField(default="", max_length=20)),
                ("timezone", models.CharField(default="", max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=128)),
                ("active", models.BooleanField(default=True)),
                ("api_daily_limit", models.IntegerField()),
                ("api_burst_limit", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="sn_hotel_map",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("simplenight_id", models.IntegerField()),
                ("provider", models.CharField(max_length=50)),
                ("provider_id", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="sn_images_map",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("simplenight_id", models.CharField(blank=True, max_length=100, null=True)),
                ("image_type", models.TextField(blank=True, null=True)),
                ("image_url_path", models.TextField(blank=True, null=True)),
                ("image_provider_id", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="supplier_hotels",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("provider_id", models.IntegerField()),
                ("hotel_codes", models.IntegerField(default=1)),
                ("hotel_name", models.CharField(max_length=50)),
                ("rating", models.FloatField(blank=True)),
                ("chain_name", models.CharField(max_length=50)),
                ("country_name", models.CharField(max_length=50)),
                ("destination_name", models.CharField(max_length=50)),
                ("address", models.CharField(max_length=75)),
                ("postal_code", models.CharField(max_length=10, null=True)),
                ("city", models.CharField(max_length=50)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                ("state", models.CharField(default="X", max_length=2)),
                ("provider_name", models.CharField(default="HotelBeds", max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="OrganizationAPIKey",
            fields=[
                (
                    "id",
                    models.CharField(editable=False, max_length=100, primary_key=True, serialize=False, unique=True),
                ),
                ("prefix", models.CharField(editable=False, max_length=8, unique=True)),
                ("hashed_key", models.CharField(editable=False, max_length=100)),
                ("created", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "name",
                    models.CharField(
                        default=None,
                        help_text="A free-form name for the API key. Need not be unique. 50 characters max.",
                        max_length=50,
                    ),
                ),
                (
                    "revoked",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)",
                    ),
                ),
                (
                    "expiry_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Once API key expires, clients cannot use it anymore.",
                        null=True,
                        verbose_name="Expires",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="api_keys", to="api.organization"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GeonameAlternateName",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("alternate_name_id", models.IntegerField()),
                ("iso_language_code", models.CharField(max_length=2)),
                ("name", models.TextField()),
                ("is_colloquial", models.BooleanField()),
                ("iatacode", models.CharField(max_length=3)),
                (
                    "geoname",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lang",
                        to="api.geoname",
                        to_field="geoname_id",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Traveler",
            fields=[
                (
                    "traveler_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("first_name", models.TextField()),
                ("last_name", models.TextField()),
                ("email_address", models.TextField()),
                ("phone_number", models.TextField()),
                ("city", models.TextField(null=True)),
                ("province", models.TextField(null=True)),
                ("country", models.CharField(max_length=2, null=True)),
                ("address_line_1", models.TextField(null=True)),
                ("address_line_2", models.TextField(null=True)),
            ],
            options={"db_table": "api_traveler"},
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                ("booking_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("transaction_id", models.TextField()),
                ("booking_date", models.DateTimeField(auto_now_add=True)),
                (
                    "booking_status",
                    models.CharField(
                        choices=[("booked", "booked"), ("cancelled", "cancelled"), ("pending", "pending")],
                        max_length=32,
                    ),
                ),
                ("lead_traveler", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.traveler")),
            ],
            options={"db_table": "api_bookings"},
        ),
        migrations.CreateModel(
            name="PaymentTransaction",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("sn_transaction_id", models.IntegerField(null=True)),
                ("provider_name", models.CharField(max_length=32)),
                ("charge_id", models.CharField(max_length=50)),
                ("transaction_status", models.CharField(max_length=50)),
                ("transaction_amount", models.FloatField()),
                ("currency", models.CharField(max_length=3)),
                ("transaction_time", models.DateTimeField(auto_now_add=True)),
                ("payment_token", models.CharField(default="pt_foo", max_length=128)),
                ("transaction_type", models.CharField(default="sale", max_length=12)),
            ],
            options={"db_table": "pmt_transaction"},
        ),
        migrations.CreateModel(
            name="HotelBooking",
            fields=[
                (
                    "hotel_booking_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("hotel_name", models.TextField()),
                ("crs_name", models.TextField()),
                ("hotel_code", models.TextField()),
                ("record_locator", models.TextField()),
                ("total_price", models.DecimalField(decimal_places=2, max_digits=8)),
                ("currency", models.CharField(max_length=3)),
                ("booking", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.booking")),
                ("crs_currency", models.CharField(default="USD", max_length=3)),
                ("crs_total_price", models.DecimalField(decimal_places=2, default=0, max_digits=8)),
            ],
            options={"db_table": "api_hotel_bookings"},
        ),
        migrations.CreateModel(
            name="Provider",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=32, unique=True)),
            ],
            options={"db_table": "providers"},
        ),
        migrations.CreateModel(
            name="CrsCity",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("provider_code", models.TextField(unique=True)),
                ("location_name", models.TextField()),
                ("province", models.TextField()),
                ("country_code", models.CharField(max_length=2)),
                ("latitude", models.DecimalField(decimal_places=6, max_digits=11)),
                ("longitude", models.DecimalField(decimal_places=6, max_digits=11)),
                ("provider", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.provider")),
            ],
            options={"db_table": "crs_cities"},
        ),
        migrations.CreateModel(
            name="hotel_listing",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("provider", models.TextField(blank=True, null=True)),
                ("hotelid", models.TextField(blank=True, null=True)),
                ("address", models.TextField(blank=True, null=True)),
                ("hotelname", models.TextField(blank=True, null=True)),
                ("zipcode", models.TextField(blank=True, null=True)),
                ("stars", models.FloatField(blank=True, null=True)),
                ("countrycode", models.TextField(blank=True, null=True)),
                ("city", models.TextField(blank=True, null=True)),
                ("simplenight_id", models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CityMap",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("simplenight_city_id", models.IntegerField()),
                ("provider_city_id", models.TextField()),
                ("provider", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.provider")),
            ],
        ),
        migrations.CreateModel(
            name="Airport",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("airport_id", models.IntegerField()),
                ("airport_name", models.TextField()),
                ("city_name", models.TextField()),
                ("iso_country_code", models.TextField()),
                ("airport_code", models.CharField(max_length=3)),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                ("timezone", models.TextField()),
                (
                    "geoname",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="geoname",
                        to="api.geoname",
                        to_field="geoname_id",
                    ),
                ),
            ],
            options={"db_table": "airports"},
        ),
        migrations.AddIndex(
            model_name="airport",
            index=models.Index(fields=["airport_name", "airport_code"], name="airports_airport_51f186_idx"),
        ),
        migrations.AddIndex(
            model_name="geoname", index=models.Index(fields=["location_name"], name="api_geoname_locatio_95d21a_idx"),
        ),
        migrations.AddIndex(
            model_name="geonamealternatename", index=models.Index(fields=["name"], name="api_geoname_name_1211a8_idx"),
        ),
        migrations.AlterModelTable(name="organization", table="organization",),
        migrations.AlterModelTable(name="organizationapikey", table="organization_api_keys",),
        migrations.RenameModel(old_name="CrsCity", new_name="ProviderCity",),
        migrations.RenameField(model_name="hotelbooking", old_name="crs_currency", new_name="provider_currency",),
        migrations.RenameField(model_name="hotelbooking", old_name="crs_name", new_name="provider_name",),
        migrations.RenameField(model_name="hotelbooking", old_name="crs_total_price", new_name="provider_total",),
        migrations.AlterModelTable(name="providercity", table="provider_cities",),
        migrations.CreateModel(
            name="OrganizationFeatures",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "name",
                    models.TextField(
                        choices=[("enabled_connectors", "ENABLED_ADAPTERS"), ("test_mode", "TEST_MODE")], unique=True
                    ),
                ),
                ("value", models.TextField()),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="org", to="api.organization"
                    ),
                ),
            ],
            options={"db_table": "organization_features"},
        ),
        migrations.CreateModel(
            name="supplier_priceline",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("supplier", models.CharField(default="Priceline", max_length=50)),
                ("supplier_id", models.CharField(blank=True, max_length=100)),
                ("hotel_name", models.CharField(max_length=100)),
                ("hotel_address", models.CharField(max_length=100)),
                ("hotel_city", models.CharField(max_length=100)),
                ("hotel_state", models.CharField(max_length=25)),
                ("hotel_country_code", models.CharField(max_length=3)),
                ("hotel_postal_code", models.CharField(max_length=15)),
                ("hotel_rating", models.FloatField()),
                ("hotel_description", models.TextField(max_length=100)),
                (
                    "hotel_amenities",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django.contrib.postgres.fields.ArrayField(
                            base_field=models.CharField(blank=True, max_length=100), size=8
                        ),
                        size=8,
                    ),
                ),
                ("hotelid_ppn", models.TextField(max_length=100)),
                ("cityid_ppn", models.TextField(max_length=100)),
                ("image_url_path", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.RenameField(model_name="citymap", old_name="provider_city_id", new_name="provider_city",),
        migrations.AlterField(
            model_name="citymap",
            name="provider_city",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="provider_city",
                to="api.providercity",
                to_field="provider_code",
            ),
        ),
        migrations.RenameField(model_name="citymap", old_name="simplenight_city_id", new_name="simplenight_city",),
        migrations.AlterField(
            model_name="citymap",
            name="simplenight_city",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="simplenight_city",
                to="api.geoname",
                to_field="geoname_id",
            ),
        ),
        migrations.AddIndex(
            model_name="supplier_priceline",
            index=models.Index(fields=["hotelid_ppn"], name="api_supplie_hotelid_60542b_idx"),
        ),
        migrations.AddField(model_name="hotelbooking", name="cancelable", field=models.BooleanField(default=False),),
        migrations.AddField(model_name="hotelbooking", name="cancelable_hours", field=models.IntegerField(default=0),),
        migrations.AddField(
            model_name="hotelbooking", name="checkindate", field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="hotelbooking", name="checkoutdate", field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(model_name="hotelbooking", name="refundable_amount", field=models.IntegerField(default=0),),
        migrations.CreateModel(
            name="cancelationBookingPolicy",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("refundable", models.BooleanField(default=False)),
                ("cancelable_hours", models.IntegerField(blank=True, default=0, null=True)),
                ("refundable_amount", models.IntegerField(blank=True, default=0, null=True)),
                ("booking", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.booking")),
            ],
        ),
        migrations.CreateModel(
            name="ProviderImages",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("provider_code", models.TextField()),
                ("type", models.TextField()),
                ("display_order", models.IntegerField()),
                ("image_url", models.TextField()),
                ("provider", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.provider")),
            ],
            options={"db_table": "provider_images"},
        ),
        migrations.AddIndex(
            model_name="providerimages",
            index=models.Index(fields=["provider", "provider_code"], name="provider_im_provide_a42793_idx"),
        ),
        migrations.RemoveField(model_name="hotelbooking", name="cancelable"),
        migrations.RemoveField(model_name="hotelbooking", name="cancelable_hours"),
        migrations.RemoveField(model_name="hotelbooking", name="checkindate"),
        migrations.RemoveField(model_name="hotelbooking", name="checkoutdate"),
        migrations.RemoveField(model_name="hotelbooking", name="refundable_amount"),
        migrations.DeleteModel(name="cancelationBookingPolicy"),
        migrations.CreateModel(
            name="HotelCancellationPolicy",
            fields=[
                ("cancellation_policy_id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                (
                    "cancellation_type",
                    models.TextField(
                        choices=[
                            ("UNKNOWN_CANCELLATION_POLICY", "UNKNOWN_CANCELLATION_POLICY"),
                            ("FREE_CANCELLATION", "FREE_CANCELLATION"),
                            ("NON_REFUNDABLE", "NON_REFUNDABLE"),
                            ("PARTIAL_REFUND", "PARTIAL_REFUND"),
                        ]
                    ),
                ),
                ("description", models.TextField()),
                ("begin_date", models.DateField()),
                ("end_date", models.DateField()),
                ("penalty_amount", models.DecimalField(decimal_places=2, max_digits=8)),
                ("penalty_currency", models.CharField(max_length=3)),
                (
                    "hotel_booking",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.hotelbooking"),
                ),
            ],
            options={"db_table": "api_hotel_cancellation_policy"},
        ),
        migrations.CreateModel(
            name="ProviderMapping",
            fields=[
                ("provider_mapping_id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ("giata_code", models.TextField()),
                ("provider_code", models.TextField()),
                ("provider", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.provider")),
            ],
            options={"db_table": "provider_mappings"},
        ),
        migrations.DeleteModel(name="supplier_hotels"),
        migrations.AddIndex(
            model_name="providermapping",
            index=models.Index(fields=["provider", "provider_code"], name="provider_ma_provide_ec5dea_idx"),
        ),
        migrations.CreateModel(
            name="ProviderHotel",
            fields=[
                ("provider_hotel_id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ("provider_code", models.TextField()),
                ("language_code", models.CharField(default="en", max_length=2)),
                ("hotel_name", models.TextField()),
                ("city_name", models.TextField(null=True)),
                ("state", models.TextField(null=True)),
                ("country_code", models.CharField(max_length=2, null=True)),
                ("address_line_1", models.TextField(null=True)),
                ("address_line_2", models.TextField(null=True)),
                ("postal_code", models.CharField(max_length=10, null=True)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                ("provider", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.provider")),
            ],
            options={"db_table": "provider_hotel"},
        ),
        migrations.AddIndex(
            model_name="providerhotel",
            index=models.Index(fields=["provider", "provider_code"], name="provider_ho_provide_c6e210_idx"),
        ),
        migrations.DeleteModel(name="hotel_listing"),
        migrations.DeleteModel(name="sn_hotel_map"),
        migrations.DeleteModel(name="sn_images_map"),
        migrations.AddIndex(
            model_name="providermapping",
            index=models.Index(fields=["provider", "giata_code"], name="provider_ma_provide_c4b14a_idx"),
        ),
        migrations.AlterField(
            model_name="hotelcancellationpolicy", name="begin_date", field=models.DateField(null=True),
        ),
        migrations.AlterField(
            model_name="hotelcancellationpolicy", name="description", field=models.TextField(null=True),
        ),
        migrations.AlterField(
            model_name="hotelcancellationpolicy", name="end_date", field=models.DateField(null=True),
        ),
        migrations.AlterField(
            model_name="hotelcancellationpolicy",
            name="penalty_amount",
            field=models.DecimalField(decimal_places=2, max_digits=8, null=True),
        ),
        migrations.AlterField(
            model_name="hotelcancellationpolicy",
            name="penalty_currency",
            field=models.CharField(max_length=3, null=True),
        ),
        migrations.AlterField(
            model_name="organizationfeatures",
            name="name",
            field=models.TextField(choices=[("enabled_connectors", "ENABLED_ADAPTERS"), ("test_mode", "TEST_MODE")]),
        ),
        migrations.AlterUniqueTogether(name="organizationfeatures", unique_together={("organization", "name")},),
        migrations.AddField(
            model_name="providerhotel",
            name="amenities",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(blank=True, max_length=100), null=True, size=None
            ),
        ),
        migrations.AddField(
            model_name="providerhotel", name="property_description", field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="providerhotel",
            name="star_rating",
            field=models.DecimalField(decimal_places=1, max_digits=2, null=True),
        ),
        migrations.AddField(model_name="providerhotel", name="thumbnail_url", field=models.TextField(null=True),),
        migrations.AlterField(model_name="providerhotel", name="postal_code", field=models.TextField(null=True),),
        migrations.AddField(model_name="providerhotel", name="provider_reference", field=models.TextField(null=True),),
        migrations.DeleteModel(name="supplier_priceline",),
        migrations.RenameField(model_name="hotelbooking", old_name="hotel_code", new_name="provider_hotel_id",),
        migrations.AddField(model_name="hotelbooking", name="simplenight_hotel_id", field=models.TextField(null=True),),
        migrations.AddField(
            model_name="hotelbooking",
            name="provider",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.provider"),
        ),
        migrations.RunSQL(
            sql="UPDATE api_hotel_bookings SET provider_id = providers.id FROM providers "
            + "WHERE providers.name = api_hotel_bookings.provider_name",
        ),
        migrations.RemoveField(model_name="hotelbooking", name="provider_name",),
        migrations.AddField(
            model_name="hotelbooking",
            name="checkin",
            field=models.DateField(default="1900-01-01"),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="hotelbooking",
            name="checkout",
            field=models.DateField(default="1900-01-01"),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="ProviderChain",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("provider_code", models.TextField()),
                ("chain_name", models.TextField()),
                ("modified_date", models.DateTimeField(default=datetime.datetime.now)),
                ("provider", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.provider")),
            ],
            options={"db_table": "provider_chains"},
        ),
        migrations.AddIndex(
            model_name="providerchain",
            index=models.Index(fields=["provider", "provider_code"], name="provider_ch_provide_e0430a_idx"),
        ),
        migrations.AddField(
            model_name="paymenttransaction",
            name="booking",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.booking"),
        ),
        migrations.AlterField(
            model_name="providerchain",
            name="modified_date",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterModelTable(name="paymenttransaction", table="payment_transaction",),
        migrations.RunSQL(sql="UPDATE payment_transaction SET transaction_type = '0'",),
        migrations.AlterField(
            model_name="paymenttransaction",
            name="transaction_type",
            field=django_enumfield.db.fields.EnumField(enum=api.models.models.TransactionType),
        ),
        migrations.AlterField(
            model_name="paymenttransaction", name="payment_token", field=models.CharField(max_length=128, null=True),
        ),
        migrations.AddField(
            model_name="geonamealternatename",
            name="is_preferred",
            field=models.BooleanField(default=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="geonamealternatename",
            name="is_short_name",
            field=models.BooleanField(default=False),
            preserve_default=False,
        ),
        migrations.AddField(model_name="geoname", name="location_type", field=models.TextField(null=True),),
        migrations.CreateModel(
            name="RecordLocator",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("record_locator", models.CharField(max_length=8)),
                (
                    "booking",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.booking"),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="paymenttransaction",
            name="transaction_amount",
            field=models.DecimalField(decimal_places=2, max_digits=10),
        ),
        migrations.AlterField(
            model_name="hotelcancellationpolicy",
            name="penalty_amount",
            field=models.DecimalField(decimal_places=2, default=0, max_digits=8),
        ),
        migrations.CreateModel(
            name="PropertyInfo",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("provider_code", models.TextField()),
                ("type", models.TextField()),
                ("language_code", models.CharField(max_length=2)),
                ("description", models.TextField()),
                ("provider", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.provider")),
            ],
            options={"db_table": "property_info"},
        ),
        migrations.AddIndex(
            model_name="propertyinfo",
            index=models.Index(
                fields=["provider", "provider_code", "language_code", "type"], name="property_in_provide_184978_idx"
            ),
        ),
        migrations.AlterModelOptions(
            name="booking", options={"verbose_name": "Booking", "verbose_name_plural": "Bookings"},
        ),
        migrations.AlterModelOptions(
            name="organization", options={"verbose_name": "Organization", "verbose_name_plural": "Organizations"},
        ),
        migrations.AlterModelOptions(
            name="organizationfeatures",
            options={"verbose_name": "Organization Feature", "verbose_name_plural": "Organization Features"},
        ),
        migrations.AddField(
            model_name="organization", name="username", field=models.CharField(max_length=32, null=True),
        ),
        migrations.AlterField(
            model_name="organizationfeatures",
            name="name",
            field=models.TextField(
                choices=[
                    ("enabled_connectors", "ENABLED_ADAPTERS"),
                    ("test_mode", "TEST_MODE"),
                    ("stripe_api_key", "STRIPE_API_KEY"),
                ]
            ),
        ),
        migrations.CreateModel(
            name="ProviderHotelPhones",
            fields=[
                ("provider_hotel_phone_id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ("provider_code", models.TextField()),
                ("type", django_enumfield.db.fields.EnumField(enum=api.models.models.PhoneType)),
                ("phone_number", models.TextField()),
                ("provider", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.provider")),
            ],
            options={"db_table": "provider_hotel_phones"},
        ),
        migrations.AddIndex(
            model_name="providerhotelphones",
            index=models.Index(fields=["provider", "provider_code"], name="provider_ho_provide_521a46_idx"),
        ),
        migrations.AlterField(
            model_name="organizationfeatures",
            name="name",
            field=models.TextField(
                choices=[
                    ("enabled_connectors", "ENABLED_ADAPTERS"),
                    ("test_mode", "TEST_MODE"),
                    ("stripe_api_key", "STRIPE_API_KEY"),
                    ("priceline_api_url", "PRICELINE_API_URL"),
                ]
            ),
        ),
        migrations.AddField(
            model_name="providerhotelphones",
            name="provider_hotel",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, related_name="phone", to="api.providerhotel"
            ),
        ),
        migrations.AlterField(
            model_name="organizationfeatures",
            name="name",
            field=models.TextField(
                choices=[
                    ("enabled_connectors", "ENABLED_ADAPTERS"),
                    ("test_mode", "TEST_MODE"),
                    ("stripe_api_key", "STRIPE_API_KEY"),
                    ("priceline_api_url", "PRICELINE_API_URL"),
                    ("mailgun_api_key", "MAILGUN_API_KEY"),
                    ("email_enabled", "EMAIL_ENABLED"),
                ]
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="organization",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.organization"),
        ),
        migrations.CreateModel(
            name="SearchEvent",
            fields=[
                ("search_event_data_id", models.UUIDField(primary_key=True, serialize=False)),
                ("search_type", django_enumfield.db.fields.EnumField(enum=api.models.models.SearchType)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("search_input", models.TextField()),
                ("result", django_enumfield.db.fields.EnumField(enum=api.models.models.SearchResult)),
                ("elapsed_time", models.IntegerField()),
                (
                    "organization",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.organization"),
                ),
            ],
            options={"db_table": "search_events"},
        ),
        migrations.CreateModel(
            name="HotelEvent",
            fields=[
                ("hotel_event_data_id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ("search_event_data_id", models.UUIDField()),
                ("provider_code", models.TextField()),
                ("giata_code", models.TextField()),
                ("total", models.DecimalField(decimal_places=2, max_digits=10)),
                ("base", models.DecimalField(decimal_places=2, max_digits=10)),
                ("taxes", models.DecimalField(decimal_places=2, max_digits=10)),
                ("provider_total", models.DecimalField(decimal_places=2, max_digits=10)),
                ("provider_base", models.DecimalField(decimal_places=2, max_digits=10)),
                ("provider_taxes", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "provider",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.provider"),
                ),
            ],
            options={"db_table": "hotel_events"},
        ),
        migrations.CreateModel(
            name="ProviderReview",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("provider_code", models.TextField()),
                ("rating", models.DecimalField(decimal_places=1, max_digits=3)),
                ("review_count", models.IntegerField()),
                ("provider", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.provider")),
            ],
            options={"db_table": "provider_review"},
        ),
        migrations.AlterField(
            model_name="booking", name="booking_date", field=models.DateTimeField(default=datetime.datetime.now),
        ),
        migrations.CreateModel(
            name="ProviderReviewContent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("review_date", models.DateField()),
                ("rating", models.DecimalField(decimal_places=1, max_digits=3)),
                ("review_text", models.TextField(null=True)),
                ("good_text", models.TextField(null=True)),
                ("bad_text", models.TextField(null=True)),
                ("overall_description", models.TextField(null=True)),
                (
                    "provider_review",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.providerreview"),
                ),
            ],
            options={"db_table": "provider_review_content"},
        ),
        migrations.AddIndex(
            model_name="providerreview",
            index=models.Index(fields=["provider", "provider_code"], name="provider_re_provide_365d38_idx"),
        ),
        migrations.AddField(
            model_name="searchevent", name="request_id", field=models.CharField(max_length=8, null=True),
        ),
        migrations.RunSQL(sql="CREATE INDEX ON search_events(request_id)"),
        migrations.RunSQL(sql="CREATE INDEX ON search_events(created_at)"),
        migrations.CreateModel(
            name="Venue",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=32, unique=True)),
                ("venue_from", models.CharField(choices=[("SN", "SN"), ("PO", "PO")], default="SN", max_length=2)),
                ("language_code", models.CharField(default="en", max_length=3)),
                ("tags", models.CharField(blank=True, max_length=100, null=True)),
                ("star_rating", models.IntegerField(blank=True, null=True)),
                ("status", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="venue_requests_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="venue_requests_modified",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("NIGHT_LIFE", "NIGHT_LIFE"),
                            ("HOTELS", "HOTELS"),
                            ("CAR_SERVICE", "CAR_SERVICE"),
                            ("GAS_AND_CHARGING", "GAS_AND_CHARGING"),
                            ("TOLLS", "TOLLS"),
                            ("SHOPPINGS", "SHOPPINGS"),
                            ("THINGS_TO_DO", "THINGS_TO_DO"),
                            ("DINING", "DINING"),
                            ("FAST_FOOD", "FAST_FOOD"),
                            ("COFFEE_AND_TEA", "COFFEE_AND_TEA"),
                        ],
                        default="NIGHT_LIFE",
                        max_length=20,
                    ),
                ),
            ],
            options={"verbose_name": "Venue", "verbose_name_plural": "Venues"},
        ),
        migrations.CreateModel(
            name="VenueImage",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "type",
                    models.CharField(
                        blank=True, choices=[("VIDEO", "VIDEO"), ("IMAGE", "IMAGE")], max_length=8, null=True
                    ),
                ),
                ("url", models.TextField()),
                ("venue_id", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.venue")),
                ("created_at", models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Venue Media",
                "verbose_name_plural": "Venue Images",
                "db_table": "api_venue_images",
            },
        ),
        migrations.AlterModelTable(name="venueimage", table="venue_media",),
        migrations.RenameModel(old_name="VenueImage", new_name="VenueMedia",),
        migrations.AlterModelOptions(
            name="venuemedia", options={"verbose_name": "VenueMedia", "verbose_name_plural": "VenueMedia"},
        ),
        migrations.AlterField(
            model_name="organizationfeatures",
            name="name",
            field=models.TextField(
                choices=[
                    ("enabled_connectors", "ENABLED_ADAPTERS"),
                    ("test_mode", "TEST_MODE"),
                    ("stripe_api_key", "STRIPE_API_KEY"),
                    ("priceline_api_url", "PRICELINE_API_URL"),
                    ("mailgun_api_key", "MAILGUN_API_KEY"),
                    ("email_enabled", "EMAIL_ENABLED"),
                    ("hotelbeds_api_url", "HOTELBEDS_API_URL"),
                    ("hotelbeds_api_key", "HOTELBEDS_API_KEY"),
                    ("hotelbeds_api_secret", "HOTELBEDS_API_SECRET"),
                ]
            ),
        ),
        migrations.AlterModelTable(name="venue", table="venues",),
        migrations.RenameField(model_name="venue", old_name="id", new_name="id",),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200)),
                ("icon", models.TextField(blank=True, null=True)),
                ("api_key", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "PaymentMethod",
                "verbose_name_plural": "PaymentMethods",
                "db_table": "payment_methods",
            },
        ),
        migrations.AlterField(model_name="venue", name="name", field=models.CharField(max_length=300, unique=True),),
        migrations.CreateModel(
            name="ProductGroup",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200)),
                ("venue", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.venue")),
            ],
            options={
                "verbose_name": "ProductGroup",
                "verbose_name_plural": "ProductGroups",
                "db_table": "product_groups",
            },
        ),
        migrations.AlterField(
            model_name="venue",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_by",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="venue",
            name="modified_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="modified_by",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="ProductsNightLife",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200)),
                ("price", models.TextField()),
                ("capacity", models.IntegerField()),
                ("highlight", models.BooleanField(default=0)),
                ("status", models.BooleanField(default=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "venue",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="products", to="api.venue"
                    ),
                ),
                (
                    "product_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="productsnightlife_requests_modified",
                        to="api.productgroup",
                    ),
                ),
            ],
            options={
                "verbose_name": "ProductsNightLife",
                "verbose_name_plural": "ProductsNightLife",
                "db_table": "products_nightlife",
            },
        ),
        migrations.AlterField(model_name="venue", name="status", field=models.BooleanField(default=0),),
        migrations.CreateModel(
            name="VenueContact",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "type",
                    models.CharField(choices=[("MAIN", "MAIN"), ("OTHER", "OTHER")], default="MAIN", max_length=5),
                ),
                ("website", models.TextField(blank=True, null=True)),
                ("phone_number", models.TextField(blank=True, null=True)),
                ("fax", models.TextField(blank=True, null=True)),
                ("email", models.TextField(blank=True, null=True)),
                ("title", models.TextField(blank=True, null=True)),
                ("department", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "venue",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="contacts", to="api.venue"
                    ),
                ),
            ],
            options={
                "verbose_name": "VenueContact",
                "verbose_name_plural": "VenueContacts",
                "db_table": "venue_contacts",
            },
        ),
        migrations.CreateModel(
            name="VenueDetail",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("description", models.TextField(blank=True, null=True)),
                ("location", models.TextField(blank=True, null=True)),
                ("logitude", models.CharField(blank=True, max_length=10, null=True)),
                ("latitude", models.CharField(blank=True, max_length=200, null=True)),
                ("capacity", models.IntegerField(blank=True, null=True)),
                ("availability", jsonfield.fields.JSONField(default=dict)),
                ("holidays", jsonfield.fields.JSONField(default=dict)),
                ("amenities", jsonfield.fields.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "payment_method",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="venuedetail_requests_modified",
                        to="api.paymentmethod",
                    ),
                ),
                (
                    "venue",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="details", to="api.venue"
                    ),
                ),
            ],
            options={"verbose_name": "VenueDetail", "verbose_name_plural": "VenueDetail", "db_table": "venue_details"},
        ),
        migrations.RenameField(model_name="venuemedia", old_name="venue_id", new_name="venue",),
        migrations.AlterField(
            model_name="venuemedia",
            name="venue",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="media", to="api.venue"),
        ),
        migrations.AddField(
            model_name="providerhotel", name="chain_code", field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="providerhotel", name="chain_name", field=models.TextField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="ProductMedia",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "type",
                    models.CharField(
                        blank=True, choices=[("VIDEO", "VIDEO"), ("IMAGE", "IMAGE")], max_length=8, null=True
                    ),
                ),
                ("url", models.TextField(blank=True, null=True)),
                ("thumbnail", models.TextField()),
                ("mail", models.BooleanField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("venue", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.venue")),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="media",
                        to="api.productsnightlife",
                    ),
                ),
            ],
            options={
                "verbose_name": "ProductMedia",
                "verbose_name_plural": "ProductMedia",
                "db_table": "product_media",
            },
        ),
        migrations.RunPython(code=set_defaults_values,),
        migrations.CreateModel(
            name="ProductHotels",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200)),
                ("price", models.TextField()),
                ("description", models.TextField()),
                ("room_size", models.TextField()),
                ("max_guests", models.TextField()),
                ("item_code", models.CharField(blank=True, max_length=200, null=True)),
                ("highlight", models.BooleanField(default=0)),
                ("balcony", models.BooleanField(default=0)),
                ("status", models.BooleanField(default=1)),
                ("room_details", jsonfield.fields.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "product_group",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.productgroup"
                    ),
                ),
                (
                    "venue",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="venue", to="api.venue"
                    ),
                ),
            ],
            options={
                "verbose_name": "ProductHotel",
                "verbose_name_plural": "ProductHotels",
                "db_table": "products_hotel",
            },
        ),
        migrations.CreateModel(
            name="ProductsHotelRoomPricing",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("rate", jsonfield.fields.JSONField(default=dict)),
                ("taxes", jsonfield.fields.JSONField(default=dict)),
                ("guests", jsonfield.fields.JSONField(default=dict)),
                ("dates", jsonfield.fields.JSONField(default=dict)),
                (
                    "product_hotels",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.producthotels"
                    ),
                ),
            ],
            options={
                "verbose_name": "ProductsHotelRoomPricing",
                "verbose_name_plural": "ProductsHotelRoomPricings",
                "db_table": "products_hotel_room_pricing",
            },
        ),
        migrations.CreateModel(
            name="ProductsHotelRoomDetails",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("BEDROOM", "BEDROOM"),
                            ("BATHROOM", "BATHROOM"),
                            ("ENTERTAINMENT", "ENTERTAINMENT"),
                            ("FOODANDDRINK", "BATHROOM"),
                            ("MORE", "MORE"),
                        ],
                        default="BEDROOM",
                        max_length=20,
                    ),
                ),
                (
                    "product_hotels",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.producthotels"
                    ),
                ),
            ],
            options={
                "verbose_name": "ProductsHotelRoomDetails",
                "verbose_name_plural": "ProductsHotelRoomDetails",
                "db_table": "products_hotel_room_details",
            },
        ),
    ]
